datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

model Block {
  id         Int         @id @default(autoincrement())
  number     Int
  hash       String
  timestamp  DateTime    @default(now())
  batchId    String
  extrinsics Extrinsic[]
  events     Event[]

  @@map("acala_block")
}

enum BatchStatus {
  FAILED  @map("0")
  SUCCESS @map("1")
  RUNNING @map("2")
}

enum BatchType {
  EXTRACT   @map("1")
  TRANSFORM @map("2")
}

model BatchLog {
  id         Int         @id @default(autoincrement())
  batchId    String
  startTime  DateTime    @default(now())
  endTime    DateTime?
  status     BatchStatus @default(RUNNING)
  type       BatchType
  retryCount Int         @default(0)

  @@map("acala_batchlog")
}

model Extrinsic {
  id      Int     @id @default(autoincrement())
  blockId Int
  index   Int
  method  String  @db.Text
  signer  String?
  fee     String?
  status  String?
  params  Json?
  batchId String
  block   Block   @relation(fields: [blockId], references: [id])
  events  Event[]

  @@map("acala_extrinsic")
}

model Event {
  id          Int        @id @default(autoincrement())
  blockId     Int
  extrinsicId Int?
  index       Int
  section     String
  method      String
  data        Json?
  batchId     String
  block       Block      @relation(fields: [blockId], references: [id])
  extrinsic   Extrinsic? @relation(fields: [extrinsicId], references: [id])

  @@map("acala_event")
}

model DimChain {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(50)
  chainId   Int
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
  tokens    DimToken[]

  @@map("dim_chains")
}

model DimAssetType {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.VarChar(50)
  createdAt DateTime   @default(now()) @map("created_at")
  tokens    DimToken[]

  @@map("dim_asset_types")
}

model DimReturnType {
  id         Int             @id @default(autoincrement())
  name       String          @unique @db.VarChar(50)
  createdAt  DateTime        @default(now()) @map("created_at")
  yieldStats FactYieldStat[]

  @@map("dim_return_types")
}

model DimToken {
  id          Int      @id @default(autoincrement())
  chainId     Int
  address     String   @db.VarChar(42)
  symbol      String   @db.VarChar(20)
  name        String   @db.VarChar(100)
  decimals    Int
  assetTypeId Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  chain      DimChain             @relation(fields: [chainId], references: [id])
  assetType  DimAssetType         @relation(fields: [assetTypeId], references: [id])
  dailyStats FactTokenDailyStat[]
  yieldStats FactYieldStat[]

  @@unique([chainId, address])
  @@map("dim_tokens")
}

model FactTokenDailyStat {
  id        BigInt   @id @default(autoincrement())
  tokenId   Int
  date      DateTime
  volume    Decimal  @db.Decimal(36, 18)
  volumeUsd Decimal  @map("volume_usd") @db.Decimal(36, 18)
  txnsCount Int      @map("txns_count")
  priceUsd  Decimal  @map("price_usd") @db.Decimal(36, 18)
  volumeYoy Decimal? @map("volume_yoy") @db.Decimal(10, 2)
  volumeQoq Decimal? @map("volume_qoq") @db.Decimal(10, 2)
  txnsYoy   Decimal? @map("txns_yoy") @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")

  token DimToken @relation(fields: [tokenId], references: [id])

  @@unique([tokenId, date])
  @@map("fact_token_daily_stats")
}

model FactYieldStat {
  id           BigInt   @id @default(autoincrement())
  tokenId      Int
  returnTypeId Int
  poolAddress  String   @db.VarChar(42)
  date         DateTime
  apy          Decimal  @db.Decimal(10, 2)
  tvl          Decimal  @db.Decimal(36, 18)
  tvlUsd       Decimal  @map("tvl_usd") @db.Decimal(36, 18)
  createdAt    DateTime @default(now()) @map("created_at")

  token      DimToken      @relation(fields: [tokenId], references: [id])
  returnType DimReturnType @relation(fields: [returnTypeId], references: [id])

  @@unique([tokenId, poolAddress, date])
  @@map("fact_yield_stats")
}

model DimStatCycle {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(20)
  days      Int
  createdAt DateTime @default(now()) @map("created_at")

  @@map("dim_stat_cycles")
}
